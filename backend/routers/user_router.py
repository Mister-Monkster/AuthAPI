from fastapi import APIRouter, HTTPException, Response, Request, Body, Query

from utils.dependencies import user_service, email_service
from Schemas.CommonScemas import MessageSchema
from Schemas.UserSchemas import SRegistration, SLogin, SAuth, SPasswordChange


auth_router = APIRouter(tags=['–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',])


@auth_router.post('/registration', summary='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüÜï')
async def register(user: SRegistration, service: user_service, service2: email_service, response: Response) -> MessageSchema:
    try:
        to_email = user.email,
        subject = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        SRegistration.model_validate(user, )
        await service2.mail_sender(to_email=to_email, subject=subject)
        data = await service.registration(user)
        refresh_token = data['refresh_token']
        access_token = data['access_token']
        response.set_cookie(key='users_refresh_token',
                            value=refresh_token,
                            httponly=True,
                            samesite='lax',
                            secure=False,
                            max_age=604800
                            )
        response.set_cookie(key='users_access_token',
                            value=access_token,
                            httponly=True,
                            samesite='lax',
                            secure=False,
                            max_age=900)
        message = MessageSchema(ok=True, detail='–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π email')
    except Exception as e:
        raise HTTPException(status_code=422, detail=f'{e}')
    return message


@auth_router.post('/verification', summary='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email')
async def email_verification(
                             request: Request,
                             service: user_service,
                             e_service: email_service,
                             code: str = Body(..., embed=True)):
    print(code)
    try:
        access_token = request.cookies.get('users_access_token')
        user = await service.get_user_profile(access_token)
        if not user.is_verificate:
            if await e_service.check_code(int(code), user.email):
                return {'ok': True, 'detail': '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é'}
            else:
                return {'ok': False, 'detail': "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}

        else:
            return {'ok': True, "detail": "–í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã"}
    except:
        raise HTTPException(status_code=401, detail='–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')


@auth_router.post('/code-retry', summary='–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞')
async def code_retry(request: Request, e_service:email_service, service: user_service):
    access_token = request.cookies.get('users_access_token')
    user = await service.get_user_profile(access_token)
    to_email = user.email,
    subject = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
    SRegistration.model_validate(user, )
    await e_service.mail_sender(to_email=to_email, subject=subject)
    return {"ok": True}




@auth_router.post('/login', summary='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—èüÜî')
async def login_user(service: user_service, response: Response, user: SLogin) -> dict:
    try:
        user_data = await service.login(user)
        refresh_token = user_data['refresh_token']
        access_token = user_data['access_token']
        response.set_cookie(key='users_refresh_token',
                        value=refresh_token,
                            httponly=True,
                            samesite='lax',
                            secure=False,
                            max_age=604800
                        )
        response.set_cookie(key='users_access_token',
                        value=access_token,
                        httponly=True,
                        samesite='lax',
                        secure=False,
                        max_age=900)
        return {'ok': True, "detail": f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['user'].username}"}
    except:
        raise HTTPException(status_code=401, detail='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')


@auth_router.post('/refresh', summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ ‚ôªÔ∏è")
async def refresh_token(
        request: Request,
        response: Response,
        service: user_service) -> SAuth:
    try:
        refresh_token = request.cookies.get('users_refresh_token')
        user_data = await service.refresh(refresh_token)
        access_token = user_data['access_token']
        response.set_cookie(key='users_access_token',
                            value=access_token,
                            httponly=True,
                            samesite='lax',
                            secure=False,
                            max_age=900)
        return user_data['user']
    except:
        raise HTTPException(status_code=401, detail="–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º.")


@auth_router.post('/logout', summary='–í—ã—Ö–æ–¥‚ùå')
async def logout(response: Response) -> MessageSchema:
    response.delete_cookie(key='users_access_token', httponly=True, samesite='lax', secure=False)
    response.delete_cookie(key='users_refresh_token', httponly=True, samesite='lax', secure=False)
    message = MessageSchema.model_validate({'ok': True, 'detail': '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'})
    return message


@auth_router.get("/user/{id}",  summary='–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def get_user(id: int, service: user_service) -> SAuth:
    try:
        res = await service.get_user_data(id)
        return res
    except:
        raise HTTPException(status_code=404, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω–æ–º—É id")


@auth_router.get("/users", summary='–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def get_all_users(request:Request, service: user_service, offset: int = Query(0, ge=0)):
    try:
        access_token = request.cookies.get('users_access_token')
        res = await service.get_users(offset, access_token=access_token)
        return res
    except:
        raise HTTPException(status_code=404, detail='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

@auth_router.get("/my-profile", summary='–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ')
async def get_user(request: Request, service: user_service):
    try:
        access_token = request.cookies.get('users_access_token')
        return await service.get_user_profile(access_token)

    except:
        raise HTTPException(status_code=401, detail="–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")


@auth_router.put('/user/update', summary='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö‚úèÔ∏è')
async def update_user(requset: Request, response: Response, user_data: SAuth, service: user_service):
    access_token = requset.cookies.get('users_access_token')
    res = await service.update_user_data(access_token, user_data)
    if res:
        return {'ok': True, 'detail': "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã"}
    else:
        return HTTPException(status_code=response.status_code, detail='–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')


@auth_router.put('/user/update-password', summary='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è‚úèÔ∏è')
async def update_user(requset: Request, response: Response, password_schema: SPasswordChange, service: user_service):
    access_token = requset.cookies.get('users_access_token')
    password = password_schema.new_password
    old_password = password_schema.old_password
    res = await service.update_user_password(access_token, password, old_password)
    response.delete_cookie(key='users_access_token', httponly=True, samesite='lax', secure=False)
    response.delete_cookie(key='users_refresh_token', httponly=True, samesite='lax', secure=False)
    if res:
        return {'ok': True, 'detail': "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!"}
    else:
        return HTTPException(status_code=response.status_code, detail='–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')


