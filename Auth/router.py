from fastapi import APIRouter, HTTPException, Response, Request, Depends

from fastapi import APIRouter, HTTPException, Response, Request

from Auth.dependencies import ServiceDep
from Schemas.CommonScemas import MessageSchema
from Schemas.UserSchemas import SRegistration, SLogin, SAuth

router = APIRouter()


@router.post('/registration', tags=['–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',], summary='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüÜï')
async def register(user: SRegistration, service: ServiceDep) -> MessageSchema:
    await service.registration(user)
    message = MessageSchema.model_validate({'ok': True, 'detail': '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'})
    return message


@router.post('/login', tags=['–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',], summary='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—èüÜî')
async def login_user(user: SLogin, service: ServiceDep, response: Response) -> SAuth:
    try:
        user_data = await service.login(user)
        refresh_token = user_data['refresh_token']
        access_token = user_data['access_token']
        response.set_cookie(key='users_refresh_token',
                            value=refresh_token,
                            httponly=True,
                            samesite='strict',
                            secure=True,
                            )
        response.set_cookie(key="users_access_token", value=access_token,
                            httponly=True,
                            samesite='strict',
                            secure=True,
                            max_age=900)
        return user_data['user']
    except:
        raise HTTPException(status_code=401, detail='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')


@router.post('/refresh', tags=['–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',], summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ ‚ôªÔ∏è")
async def refresh_token(
        request: Request,
        response: Response,
        service: ServiceDep,
) -> SAuth:
    try:
        refresh_token = request.cookies.get('users_refresh_token')
        user_data = await service.refresh( refresh_token)
        access_token = user_data['access_token']
        response.set_cookie(key='users_refresh_token',
                            value=access_token,
                            httponly=True,
                            samesite='strict',
                            secure=True,
                            max_age=900)
        return user_data['user']
    except:
        raise HTTPException(status_code=401, detail="–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º.")


@router.post('/logout', tags=['–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',], summary='–í—ã—Ö–æ–¥‚ùå')
async def logout(response: Response) -> MessageSchema:
    response.delete_cookie(key='users_access_token')
    response.delete_cookie(key='users_refresh_token')
    message = MessageSchema.model_validate({'ok': True, 'detail': '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'})
    return message


@router.get("/user/{id}", tags=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',], summary='–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def get_user(id: int, service: ServiceDep) -> SAuth:
    try:
        res = await service.get_user_data(id)
        return res
    except:
        raise HTTPException(status_code=404, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω–æ–º—É id")


@router.get("/my-profile", tags=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',], summary='–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ')
async def get_user(request: Request, service: ServiceDep):
    try:
        access_token = request.cookies.get('users_access_token')
        return await service.get_user_profile(access_token)
    except:
        raise HTTPException(status_code=401, detail="–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")


@router.put('/user/update', tags=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',], summary='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö‚úèÔ∏è')
async def update_user(requset: Request, response: Response, user_data: SAuth, service:ServiceDep):
    access_token = requset.cookies.get('users_access_token')
    res = await service.update_user_data(access_token, user_data)
    if res:
        return {'ok': True, 'detail': "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã"}
    else:
        return HTTPException(status_code=response.status_code, detail='–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')


